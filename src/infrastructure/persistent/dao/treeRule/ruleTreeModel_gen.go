// Code generated by goctl. DO NOT EDIT.

package treeRule

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleTreeFieldNames          = builder.RawFieldNames(&RuleTree{})
	ruleTreeRows                = strings.Join(ruleTreeFieldNames, ",")
	ruleTreeRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleTreeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ruleTreeRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleTreeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ruleTreeModel interface {
		Insert(ctx context.Context, data *RuleTree) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*RuleTree, error)
		FindOneByTreeId(ctx context.Context, treeId string) (*RuleTree, error)
		Update(ctx context.Context, data *RuleTree) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultRuleTreeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuleTree struct {
		Id              uint64         `db:"id"`                 // 自增ID
		TreeId          string         `db:"tree_id"`            // 规则树ID
		TreeName        string         `db:"tree_name"`          // 规则树名称
		TreeDesc        sql.NullString `db:"tree_desc"`          // 规则树描述
		TreeNodeRuleKey string         `db:"tree_node_rule_key"` // 规则树根入口规则
		CreateTime      time.Time      `db:"create_time"`        // 创建时间
		UpdateTime      time.Time      `db:"update_time"`        // 更新时间
	}
)

func newRuleTreeModel(conn sqlx.SqlConn) *defaultRuleTreeModel {
	return &defaultRuleTreeModel{
		conn:  conn,
		table: "`rule_tree`",
	}
}

func (m *defaultRuleTreeModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuleTreeModel) FindOne(ctx context.Context, id uint64) (*RuleTree, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleTreeRows, m.table)
	var resp RuleTree
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleTreeModel) FindOneByTreeId(ctx context.Context, treeId string) (*RuleTree, error) {
	var resp RuleTree
	query := fmt.Sprintf("select %s from %s where `tree_id` = ? limit 1", ruleTreeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, treeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleTreeModel) Insert(ctx context.Context, data *RuleTree) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ruleTreeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TreeId, data.TreeName, data.TreeDesc, data.TreeNodeRuleKey)
	return ret, err
}

func (m *defaultRuleTreeModel) Update(ctx context.Context, newData *RuleTree) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleTreeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.TreeId, newData.TreeName, newData.TreeDesc, newData.TreeNodeRuleKey, newData.Id)
	return err
}

func (m *defaultRuleTreeModel) tableName() string {
	return m.table
}
