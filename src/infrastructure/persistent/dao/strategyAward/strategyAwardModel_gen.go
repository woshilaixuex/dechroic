// Code generated by goctl. DO NOT EDIT.

package strategyAward

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/delyr1c/dechoric/src/types/cerr"
	"github.com/delyr1c/dechoric/src/types/common"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	strategyAwardFieldNames          = builder.RawFieldNames(&StrategyAward{})
	strategyAwardRows                = strings.Join(strategyAwardFieldNames, ",")
	strategyAwardRowsExpectAutoSet   = strings.Join(stringx.Remove(strategyAwardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	strategyAwardRowsWithPlaceHolder = strings.Join(stringx.Remove(strategyAwardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	strategyAwardModel interface {
		Insert(ctx context.Context, data *StrategyAward) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StrategyAward, error)
		FindListByStrategyId(ctx context.Context, strategyId int64) (*[]StrategyAward, error)
		Update(ctx context.Context, data *StrategyAward) error
		Delete(ctx context.Context, id int64) error
		FindByReq(ctx context.Context,req *FindStrategyAwardReq) ([]*StrategyAward,error)
	}

	defaultStrategyAwardModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StrategyAward struct {
		Id                int64          `db:"id"`                  // 自增ID
		StrategyId        int64          `db:"strategy_id"`         // 抽奖策略ID
		AwardId           int64          `db:"award_id"`            // 抽奖奖品ID - 内部流转使用
		AwardTitle        string         `db:"award_title"`         // 抽奖奖品标题
		AwardSubtitle     sql.NullString `db:"award_subtitle"`      // 抽奖奖品副标题
		AwardCount        int64          `db:"award_count"`         // 奖品库存总量
		AwardCountSurplus int64          `db:"award_count_surplus"` // 奖品库存剩余
		AwardRate         common.BigFloat`db:"award_rate"`          // 奖品中奖概率
		RuleModels        sql.NullString `db:"rule_models"`         // 规则模型，rule配置的模型同步到此表，便于使用
		Sort              int64          `db:"sort"`                // 排序
		CreateTime        time.Time      `db:"create_time"`         // 创建时间
		UpdateTime        time.Time      `db:"update_time"`         // 修改时间
	}
	FindStrategyAwardReq struct{
		StrategyId 	*int64
		AwardId 	*int64
	}
)

func newStrategyAwardModel(conn sqlx.SqlConn) *defaultStrategyAwardModel {
	return &defaultStrategyAwardModel{
		conn:  conn,
		table: "`strategy_award`",
	}
}

func (m *defaultStrategyAwardModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStrategyAwardModel) FindOne(ctx context.Context, id int64) (*StrategyAward, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", strategyAwardRows, m.table)
	var resp StrategyAward
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultStrategyAwardModel) FindListByStrategyId(ctx context.Context, strategyId int64) (*[]StrategyAward, error){
	query := fmt.Sprintf("select %s from %s where `strategy_id` = ? ORDER BY `sort` DESC", strategyAwardRows, m.table)
	var resp []StrategyAward
	err := m.conn.QueryRowsCtx(ctx, &resp, query, strategyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultStrategyAwardModel) Insert(ctx context.Context, data *StrategyAward) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, strategyAwardRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StrategyId, data.AwardId, data.AwardTitle, data.AwardSubtitle, data.AwardCount, data.AwardCountSurplus, data.AwardRate, data.RuleModels, data.Sort)
	return ret, err
}

func (m *defaultStrategyAwardModel) Update(ctx context.Context, data *StrategyAward) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, strategyAwardRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StrategyId, data.AwardId, data.AwardTitle, data.AwardSubtitle, data.AwardCount, data.AwardCountSurplus, data.AwardRate, data.RuleModels, data.Sort, data.Id)
	return err
}
func (m *defaultStrategyAwardModel)FindByReq(ctx context.Context,req *FindStrategyAwardReq) ([]*StrategyAward,error){
	query := fmt.Sprintf("select %s from %s where 1=1", strategyAwardRows, m.table)
	args := []interface{}{}
	v := reflect.ValueOf(req).Elem()
	t := v.Type()
	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)
		fieldType := t.Field(i)
		if field.Kind() == reflect.Ptr && !field.IsNil() {
			tag := fieldType.Tag.Get("db")
			if tag == "" {
				cerr.LogError(errors.New("tag db`s value is null"))
				continue
			}
			query += fmt.Sprintf(" AND %s = ?", tag)
			args = append(args, field.Interface())
		}
	}
	var strategyAwards []*StrategyAward
	err := m.conn.QueryRowsCtx(ctx, &strategyAwards, query, args...)
	if err != nil {
		return nil,cerr.LogError(err)
	}
	return strategyAwards,nil
}
func (m *defaultStrategyAwardModel) tableName() string {
	return m.table
}
