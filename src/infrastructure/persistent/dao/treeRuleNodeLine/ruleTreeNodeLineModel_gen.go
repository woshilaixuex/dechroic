// Code generated by goctl. DO NOT EDIT.

package treeRuleNodeLine

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleTreeNodeLineFieldNames          = builder.RawFieldNames(&RuleTreeNodeLine{})
	ruleTreeNodeLineRows                = strings.Join(ruleTreeNodeLineFieldNames, ",")
	ruleTreeNodeLineRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleTreeNodeLineFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ruleTreeNodeLineRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleTreeNodeLineFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ruleTreeNodeLineModel interface {
		Insert(ctx context.Context, data *RuleTreeNodeLine) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*RuleTreeNodeLine, error)
		FindRuleTreeNodeLineListByTreeId(ctx context.Context, treeId string)([]*RuleTreeNodeLine, error)
		Update(ctx context.Context, data *RuleTreeNodeLine) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultRuleTreeNodeLineModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuleTreeNodeLine struct {
		Id             uint64    `db:"id"`               // 自增ID
		TreeId         string    `db:"tree_id"`          // 规则树ID
		RuleNodeFrom   string    `db:"rule_node_from"`   // 规则Key节点 From
		RuleNodeTo     string    `db:"rule_node_to"`     // 规则Key节点 To
		RuleLimitType  string    `db:"rule_limit_type"`  // 限定类型；1:=;2:>;3:<;4:>=;5<=;6:enum[枚举范围];
		RuleLimitValue string    `db:"rule_limit_value"` // 限定值（到下个节点）
		CreateTime     time.Time `db:"create_time"`      // 创建时间
		UpdateTime     time.Time `db:"update_time"`      // 更新时间
	}
)

func newRuleTreeNodeLineModel(conn sqlx.SqlConn) *defaultRuleTreeNodeLineModel {
	return &defaultRuleTreeNodeLineModel{
		conn:  conn,
		table: "`rule_tree_node_line`",
	}
}

func (m *defaultRuleTreeNodeLineModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuleTreeNodeLineModel) FindOne(ctx context.Context, id uint64) (*RuleTreeNodeLine, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleTreeNodeLineRows, m.table)
	var resp RuleTreeNodeLine
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultRuleTreeNodeLineModel) FindRuleTreeNodeLineListByTreeId(ctx context.Context, treeId string)([]*RuleTreeNodeLine, error){
	query := fmt.Sprintf("select %s from %s where `tree_id` = ? limit 1", ruleTreeNodeLineRows, m.table)
	var resp []*RuleTreeNodeLine
	err := m.conn.QueryRowCtx(ctx, &resp, query, treeId)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultRuleTreeNodeLineModel) Insert(ctx context.Context, data *RuleTreeNodeLine) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, ruleTreeNodeLineRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TreeId, data.RuleNodeFrom, data.RuleNodeTo, data.RuleLimitType, data.RuleLimitValue)
	return ret, err
}

func (m *defaultRuleTreeNodeLineModel) Update(ctx context.Context, data *RuleTreeNodeLine) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleTreeNodeLineRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TreeId, data.RuleNodeFrom, data.RuleNodeTo, data.RuleLimitType, data.RuleLimitValue, data.Id)
	return err
}

func (m *defaultRuleTreeNodeLineModel) tableName() string {
	return m.table
}
