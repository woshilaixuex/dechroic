// Code generated by goctl. DO NOT EDIT.

package strategyRule

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/delyr1c/dechoric/src/types/cerr"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	strategyRuleFieldNames          = builder.RawFieldNames(&StrategyRule{})
	strategyRuleRows                = strings.Join(strategyRuleFieldNames, ",")
	strategyRuleRowsExpectAutoSet   = strings.Join(stringx.Remove(strategyRuleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	strategyRuleRowsWithPlaceHolder = strings.Join(stringx.Remove(strategyRuleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	strategyRuleModel interface {
		Insert(ctx context.Context, data *StrategyRule) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StrategyRule, error)
		Update(ctx context.Context, data *StrategyRule) error
		Delete(ctx context.Context, id int64) error
		FindByReq(ctx context.Context, req *FindStrategyRuleReq) ([]*StrategyRule, error)
		FindRuleValueByReq(ctx context.Context, req *FindStrategyRuleReq) (string, error) 
	}

	defaultStrategyRuleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StrategyRule struct {
		Id         int64         `db:"id"`          // 自增ID
		StrategyId int64         `db:"strategy_id"` // 抽奖策略ID
		AwardId    sql.NullInt64 `db:"award_id"`    // 抽奖奖品ID【规则类型为策略，则不需要奖品ID】
		RuleType   int64         `db:"rule_type"`   // 抽象规则类型；1-策略规则、2-奖品规则
		RuleModel  string        `db:"rule_model"`  // 抽奖规则类型【rule_random - 随机值计算、rule_lock - 抽奖几次后解锁、rule_luck_award - 幸运奖(兜底奖品)】
		RuleValue  string        `db:"rule_value"`  // 抽奖规则比值
		RuleDesc   string        `db:"rule_desc"`   // 抽奖规则描述
		CreateTime time.Time     `db:"create_time"` // 创建时间
		UpdateTime time.Time     `db:"update_time"` // 更新时间
	}
	FindStrategyRuleReq struct {
		StrategyId 	*int64			`db:"strategy_id"` // 抽奖策略ID
		AwardId 	*int32			`db:"award_id"`    // 抽奖奖品ID【规则类型为策略，则不需要奖品ID
		RuleModel  	*string			`db:"rule_model"`  // 抽奖规则类型【rule_random - 随机值计算、rule_lock - 抽奖几次后解锁、rule_luck_award - 幸运奖(兜底奖品)】
	}
)

func newStrategyRuleModel(conn sqlx.SqlConn) *defaultStrategyRuleModel {
	return &defaultStrategyRuleModel{
		conn:  conn,
		table: "`strategy_rule`",
	}
}

func (m *defaultStrategyRuleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStrategyRuleModel) FindOne(ctx context.Context, id int64) (*StrategyRule, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", strategyRuleRows, m.table)
	var resp StrategyRule
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStrategyRuleModel) Insert(ctx context.Context, data *StrategyRule) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, strategyRuleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StrategyId, data.AwardId, data.RuleType, data.RuleModel, data.RuleValue, data.RuleDesc)
	return ret, err
}

func (m *defaultStrategyRuleModel) Update(ctx context.Context, data *StrategyRule) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, strategyRuleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StrategyId, data.AwardId, data.RuleType, data.RuleModel, data.RuleValue, data.RuleDesc, data.Id)
	return err
}

func (m *defaultStrategyRuleModel) tableName() string {
	return m.table
}
// Req查询
func (m *defaultStrategyRuleModel) FindByReq(ctx context.Context, req *FindStrategyRuleReq) ([]*StrategyRule, error) {


	query := fmt.Sprintf("select %s from %s where 1=1", strategyRuleRows, m.table)
	args := []interface{}{}
	v := reflect.ValueOf(req).Elem()
	t := v.Type()
	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)
		fieldType := t.Field(i)
		if field.Kind() == reflect.Ptr && !field.IsNil() {
			tag := fieldType.Tag.Get("db")
			if tag == "" {
				cerr.LogError(errors.New("tag db`s value is null"))
				continue
			}
			query += fmt.Sprintf(" AND %s = ?", tag)
			args = append(args, field.Interface())
		}
	}

	var rules []*StrategyRule
	err := m.conn.QueryRowsCtx(ctx, &rules, query, args...)
	if err != nil {
		return nil,cerr.LogError(err)
	}

	return rules, nil
}

func (m *defaultStrategyRuleModel) FindRuleValueByReq(ctx context.Context, req *FindStrategyRuleReq) (string, error) {
	query := fmt.Sprintf("select %s from %s where 1=1", strategyRuleRows, m.table)
	args := []interface{}{}
	v := reflect.ValueOf(req).Elem()
	t := v.Type()

	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)
		fieldType := t.Field(i)
		if field.Kind() == reflect.Ptr && !field.IsNil() {
			tag := fieldType.Tag.Get("db")
			if tag == "" {
				cerr.LogError(errors.New("tag db`s value is null"))
				continue
			}
			query += fmt.Sprintf(" AND %s = ?", tag)
			args = append(args, field.Interface())
		}
	}

	var rule *StrategyRule
	err := m.conn.QueryRowCtx(ctx, &rule, query, args...)
	if err != nil {
		return "",cerr.LogError(err)
	}

	return rule.RuleValue, nil
}