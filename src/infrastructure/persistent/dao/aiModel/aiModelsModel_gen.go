// Code generated by goctl. DO NOT EDIT.

package aiModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	aiModelsFieldNames          = builder.RawFieldNames(&AiModels{})
	aiModelsRows                = strings.Join(aiModelsFieldNames, ",")
	aiModelsRowsExpectAutoSet   = strings.Join(stringx.Remove(aiModelsFieldNames, "`model_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	aiModelsRowsWithPlaceHolder = strings.Join(stringx.Remove(aiModelsFieldNames, "`model_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	aiModelsModel interface {
		Insert(ctx context.Context, data *AiModels) (sql.Result, error)
		FindOne(ctx context.Context, modelId uint64) (*AiModels, error)
		FindAll(ctx context.Context) ([]AiModels, error) 
		FindOneByModelNameVersion(ctx context.Context, modelName string, version string) (*AiModels, error)
		Update(ctx context.Context, data *AiModels) error
		Delete(ctx context.Context, modelId uint64) error
	}

	defaultAiModelsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AiModels struct {
		ModelId     uint64         `db:"model_id"`    // 模型id
		ModelName   string         `db:"model_name"`  // AI模型名称
		Description sql.NullString `db:"description"` // AI模型描述
		Version     string         `db:"version"`     // 模型版本
	}
)

func newAiModelsModel(conn sqlx.SqlConn) *defaultAiModelsModel {
	return &defaultAiModelsModel{
		conn:  conn,
		table: "`ai_models`",
	}
}

func (m *defaultAiModelsModel) Delete(ctx context.Context, modelId uint64) error {
	query := fmt.Sprintf("delete from %s where `model_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, modelId)
	return err
}

func (m *defaultAiModelsModel) FindOne(ctx context.Context, modelId uint64) (*AiModels, error) {
	query := fmt.Sprintf("select %s from %s where `model_id` = ? limit 1", aiModelsRows, m.table)
	var resp AiModels
	err := m.conn.QueryRowCtx(ctx, &resp, query, modelId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultAiModelsModel) FindAll(ctx context.Context) ([]AiModels, error) {
	query := fmt.Sprintf("select %s from %s", aiModelsRows, m.table)
	var resp []AiModels
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultAiModelsModel) FindOneByModelNameVersion(ctx context.Context, modelName string, version string) (*AiModels, error) {
	var resp AiModels
	query := fmt.Sprintf("select %s from %s where `model_name` = ? and `version` = ? limit 1", aiModelsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, modelName, version)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAiModelsModel) Insert(ctx context.Context, data *AiModels) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, aiModelsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ModelName, data.Description, data.Version)
	return ret, err
}

func (m *defaultAiModelsModel) Update(ctx context.Context, newData *AiModels) error {
	query := fmt.Sprintf("update %s set %s where `model_id` = ?", m.table, aiModelsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ModelName, newData.Description, newData.Version, newData.ModelId)
	return err
}

func (m *defaultAiModelsModel) tableName() string {
	return m.table
}
